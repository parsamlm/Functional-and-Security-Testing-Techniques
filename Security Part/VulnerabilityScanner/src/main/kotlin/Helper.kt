import com.google.gson.Gson
import com.itextpdf.kernel.pdf.PdfWriter
import com.itextpdf.layout.Document
import com.itextpdf.layout.element.Cell
import com.itextpdf.layout.element.Paragraph
import com.itextpdf.layout.element.Table
import com.itextpdf.layout.property.UnitValue
import okhttp3.OkHttpClient
import okhttp3.Request
import java.io.File
import java.io.IOException
import java.util.concurrent.TimeUnit

inline fun <reified T> jsonToKotlinObject(jsonString: String): T {
    return Gson().fromJson(jsonString, T::class.java)
}

inline fun <reified T> kotlinObjectToJson(obj: T): String {
    return Gson().toJson(obj)
}

fun readFromFile(filePath: String): String? {
    return File(filePath).takeIf { it.exists() }?.readText()
}

fun writeToFile(fileName: String, data: String) {
    File(fileName).writeText(data)
}

fun runBashCommand(command: Array<String>): String {
    return Runtime.getRuntime()
        .exec(
            command
        )
        .inputStream
        .bufferedReader()
        .readText()
        .trim()
}

fun getUserInput(message: String): String {
    println(message)
    return readln()
}

fun printVulnerabilities(
    serviceUrl: String? = null,
    type: String,
    version: String,
    vulnerabilities: Set<Vulnerability>
) {
    if (serviceUrl == null) {
        println("Service Type: $type -> ${if (vulnerabilities.isEmpty()) "No vulnerabilities found" else "${vulnerabilities.size} vulnerabilities found"}")
    } else {
        println("Url: $serviceUrl -> ${if (vulnerabilities.isEmpty()) "No vulnerabilities found" else "${vulnerabilities.size} vulnerabilities found"}")
    }
    println("$type (version: $version) vulnerabilities (CVE IDs List):")
    vulnerabilities.forEach { vulnerability ->
        println(vulnerability.cve.id)
    }
    println()
}

class HttpRequestExecutor {
    @Throws(IOException::class)
    fun run(url: String, apiKey: String? = null): String {
        val client = OkHttpClient.Builder().readTimeout(1, TimeUnit.MINUTES).build()
        val request: Request = if (apiKey != null) {
            Request.Builder().url(url).addHeader("apiKey", apiKey).build()
        } else {
            Request.Builder().url(url).build()
        }
        client.newCall(request).execute().use { response ->
            return response.body?.string() ?: ""
        }
    }
}

enum class UsageType {
    MANUAL,
    DOCKER,
    NONE
}

fun askUserForInputType(): UsageType {
    val userInput =
        getUserInput("How do you want to use the script?\n1. Manual\n2. Docker\nEnter the corresponding number:")
    return if (userInput.contentEquals("1")) {
        UsageType.MANUAL
    } else if (userInput.contentEquals("2")) {
        UsageType.DOCKER
    } else {
        UsageType.NONE
    }
}

fun getDirectory(directoryName: String = ""): String {
    return File("").absoluteFile.absolutePath + "/src/main/${directoryName.lowercase()}/"
}

fun checkIfNetworkIsAvailable(): Boolean {
    return try {
        Runtime.getRuntime().exec("ping -c 1 google.com").waitFor() == 0
    } catch (e: IOException) {
        false
    }
}

fun createOutput(manualServices: List<Service>?, dockerServices: Set<ServiceDetails>?, dockerNetworkName: String = "") {

    if (manualServices != null) {
        val writer = PdfWriter(getDirectory("resources") + "output.pdf")
        val pdfDoc = com.itextpdf.kernel.pdf.PdfDocument(writer)
        val doc = Document(pdfDoc)

        for (service in manualServices) {
            val serviceInfo =
                Paragraph(
                    "Service Information:\n${
                        if (service.type == ServiceType.WORDPRESS.toString().lowercase()) service.url + " -" else ""
                    } ${service.type} (version: ${service.version})"
                )
            doc.add(serviceInfo)

            val table = Table(UnitValue.createPercentArray(floatArrayOf(1f))).useAllAvailableWidth()

            table.addCell(Cell().add(Paragraph("Vulnerability")))
            table.addCell(Cell().add(Paragraph("Description")))
            table.addCell(Cell().add(Paragraph("Severity")))

            service.vulnerabilities?.forEach { vulnerability ->
                table.addCell(Cell().add(Paragraph(vulnerability.cve.id)))
            }

            doc.add(table)

            doc.add(Paragraph("\n"))
        }
        doc.close()
    } else if (dockerServices != null) {
        val writer = PdfWriter(getDirectory("resources") + "output.pdf")
        val pdfDoc = com.itextpdf.kernel.pdf.PdfDocument(writer)
        val doc = Document(pdfDoc)
        doc.add(Paragraph("Docker Network: $dockerNetworkName\n"))
        for (service in dockerServices) {
            val serviceInfo =
                Paragraph(
                    "Service Information:\n${service.type} (version: ${service.version})"
                )
            doc.add(serviceInfo)

            val table = Table(UnitValue.createPercentArray(floatArrayOf(1f))).useAllAvailableWidth()

            table.addCell(Cell().add(Paragraph("Vulnerability")))
            table.addCell(Cell().add(Paragraph("Description")))
            table.addCell(Cell().add(Paragraph("Severity")))

            service.vulnerabilities?.forEach { vulnerability ->
                table.addCell(Cell().add(Paragraph(vulnerability.cve.id)))
            }
            doc.add(table)

            doc.add(Paragraph("\n"))
        }
        doc.close()
    } else {
        println("")
    }

}