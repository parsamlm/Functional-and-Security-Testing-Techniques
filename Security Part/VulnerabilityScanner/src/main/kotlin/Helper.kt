import com.google.gson.Gson
import okhttp3.OkHttpClient
import okhttp3.Request
import java.io.File
import java.io.IOException
import java.util.concurrent.TimeUnit

inline fun <reified T> jsonToKotlinObject(jsonString: String): T {
    return Gson().fromJson(jsonString, T::class.java)
}

inline fun <reified T> kotlinObjectToJson(obj: T): String {
    return Gson().toJson(obj)
}

fun readFromFile(filePath: String): String? {
    return File(filePath).takeIf { it.exists() }?.readText()
}

fun writeToFile(fileName: String, data: String) {
    File(fileName).writeText(data)
}

fun runBashCommand(command: Array<String>): String {
    return Runtime.getRuntime()
        .exec(
            command
        )
        .inputStream
        .bufferedReader()
        .readText()
        .trim()
}

fun getUserInput(message: String): String {
    println(message)
    return readln()
}

fun printVulnerabilities(
    serviceUrl: String? = null,
    serviceType: String,
    serviceVersion: String,
    vulnerabilities: Set<Vulnerability>
) {
    if (serviceUrl == null) {
        println("Service Type: $serviceType -> ${if (vulnerabilities.isEmpty()) "No vulnerabilities found" else "${vulnerabilities.size} vulnerabilities found"}")
    } else {
        println("Url: $serviceUrl -> ${if (vulnerabilities.isEmpty()) "No vulnerabilities found" else "${vulnerabilities.size} vulnerabilities found"}")
    }
    println("$serviceType (version: $serviceVersion) vulnerabilities (CVE IDs List):")
    vulnerabilities.forEach { vulnerability ->
        println(vulnerability.cve.id)
    }
    println()
}

class HttpRequestExecutor {
    @Throws(IOException::class)
    fun run(url: String, apiKey: String? = null): String {
        val client = OkHttpClient.Builder().readTimeout(1, TimeUnit.MINUTES).build()
        val request: Request = if (apiKey != null) {
            Request.Builder().url(url).addHeader("apiKey", apiKey).build()
        } else {
            Request.Builder().url(url).build()
        }
        client.newCall(request).execute().use { response ->
            return response.body?.string() ?: ""
        }
    }
}

enum class UsageType {
    MANUAL,
    DOCKER,
    NONE
}

fun askUserForInputType(): UsageType {
    val userInput =
        getUserInput("How do you want to use the script?\n1. Manual\n2. Docker\nEnter the corresponding number:")
    return if (userInput.contentEquals("1")) {
        UsageType.MANUAL
    } else if (userInput.contentEquals("2")) {
        UsageType.DOCKER
    } else {
        UsageType.NONE
    }
}

fun getDirectory(directoryName: String = ""): String {
    return File("").absoluteFile.absolutePath + "/src/main/${directoryName.lowercase()}/"
}