import okhttp3.OkHttpClient
import okhttp3.Request
import java.io.IOException
import java.util.concurrent.TimeUnit

private fun fetchVulnerabilityDataFromNVDService(
    serviceVendor: String,
    serviceType: String,
    serviceVersion: String,
    startIndex: Int = 0
): String {
    val baseURL = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    val query =
        "?cpeName=cpe:2.3:o:${serviceVendor}:${serviceType}:${serviceVersion}&startIndex=${startIndex}&isVulnerable"
    val httpRequestExecutor = HttpRequestExecutor()
    return httpRequestExecutor.run("${baseURL}${query}")
}

private fun getVulnerabilitiesObj(jsonString: String): Vulnerabilities {
    return jsonToObject(jsonString)
}

fun fetchAllVulnerabilities(
    serviceVendor: String,
    serviceType: String,
    serviceVersion: String
): Set<Vulnerability> {
    val vulnerabilitiesObj = getVulnerabilitiesObj(
        fetchVulnerabilityDataFromNVDService(
            serviceVendor = serviceVendor,
            serviceType = serviceType,
            serviceVersion = serviceVersion
        )
    )
    val vulnerabilities: MutableSet<Vulnerability> = vulnerabilitiesObj.vulnerabilities
    var resultsPerPage = vulnerabilitiesObj.resultsPerPage
    while (vulnerabilitiesObj.totalResults > resultsPerPage) {
        val newVulnerabilitiesObj = getVulnerabilitiesObj(
            fetchVulnerabilityDataFromNVDService(
                serviceVendor = serviceVendor,
                serviceType = serviceType,
                serviceVersion = serviceVersion,
                startIndex = resultsPerPage
            )
        )
        vulnerabilities.addAll(newVulnerabilitiesObj.vulnerabilities)
        resultsPerPage += newVulnerabilitiesObj.resultsPerPage
    }
    return vulnerabilities
}

class HttpRequestExecutor {
    @Throws(IOException::class)
    fun run(url: String): String {
        val client = OkHttpClient.Builder().readTimeout(1, TimeUnit.MINUTES).build()
        val request = Request.Builder().url(url).build()
        Thread.sleep(6000)
        client.newCall(request).execute().use { response ->
            return response.body?.string() ?: ""
        }
    }
}