import okhttp3.OkHttpClient
import okhttp3.Request
import java.io.IOException
import java.util.concurrent.TimeUnit

private fun fetchVulnerabilitiesFromNVDService(
    serviceVendor: String,
    serviceType: String,
    serviceVersion: String,
    startIndex: Int = 0
): String {
    val httpRequestExecutor = HttpRequestExecutor()
    return httpRequestExecutor.run(
        "https://services.nvd.nist.gov/rest/json/cves/2.0" +
                "?cpeName=cpe:2.3:a:${serviceType}:${serviceType}:${serviceVersion}&startIndex=${startIndex}"
    )
}

private fun parseVulnerabilitiesFromJson(jsonString: String): Vulnerabilities {
    return jsonToKotlinObject(jsonString)
}

fun fetchAllVulnerabilities(
    serviceVendor: String,
    serviceType: String,
    serviceVersion: String
): Set<Vulnerability> {
    val vulnerabilities: MutableSet<Vulnerability> = mutableSetOf()
    var resultsPerPage = 0
    var totalResults: Int
    do {
        val vulnerabilitiesObj = parseVulnerabilitiesFromJson(
            fetchVulnerabilitiesFromNVDService(
                serviceVendor = serviceVendor,
                serviceType = serviceType,
                serviceVersion = serviceVersion,
                startIndex = resultsPerPage
            )
        )
        vulnerabilities.addAll(vulnerabilitiesObj.vulnerabilities)
        resultsPerPage += vulnerabilitiesObj.resultsPerPage
        totalResults = vulnerabilitiesObj.totalResults
    } while (totalResults > resultsPerPage)
    return vulnerabilities
}

class HttpRequestExecutor {
    @Throws(IOException::class)
    fun run(url: String): String {
        val client = OkHttpClient.Builder().readTimeout(1, TimeUnit.MINUTES).build()
        val request = Request.Builder().url(url).addHeader("apiKey", "3f46456a-4bc3-43f5-8dec-c89c9fd84f65").build()
        client.newCall(request).execute().use { response ->
            return response.body?.string() ?: ""
        }
    }
}