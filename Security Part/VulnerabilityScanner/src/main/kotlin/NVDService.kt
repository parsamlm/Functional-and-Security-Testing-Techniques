private fun fetchVulnerabilitiesFromNVDService(
    findOnlyVulnerable: Boolean = false,
    serviceVendor: String,
    serviceType: String,
    serviceVersion: String,
    startIndex: Int = 0
): String {
    val httpRequestExecutor = HttpRequestExecutor()
    return httpRequestExecutor.run(
        url = "https://services.nvd.nist.gov/rest/json/cves/2.0" +
                "?cpeName=cpe:2.3:a:${serviceType}:${serviceType}:${serviceVersion}&startIndex=${startIndex}${if (findOnlyVulnerable) "&isVulnerable=" else ""}",
        apiKey = "3f46456a-4bc3-43f5-8dec-c89c9fd84f65"
    )
}

private fun parseVulnerabilitiesFromJson(jsonString: String): Vulnerabilities {
    return jsonToObject(jsonString)
}

fun fetchAllVulnerabilities(
    findOnlyVulnerable: Boolean = false,
    vendor: String,
    type: String,
    version: String
): Set<Vulnerability> {
    val vulnerabilities: MutableSet<Vulnerability> = mutableSetOf()
    var resultsPerPage = 0
    var totalResults: Int
    do {
        val vulnerabilitiesObj = parseVulnerabilitiesFromJson(
            fetchVulnerabilitiesFromNVDService(
                findOnlyVulnerable = findOnlyVulnerable,
                serviceVendor = vendor,
                serviceType = type,
                serviceVersion = version,
                startIndex = resultsPerPage
            )
        )
        vulnerabilities.addAll(vulnerabilitiesObj.vulnerabilities)
        resultsPerPage += vulnerabilitiesObj.resultsPerPage
        totalResults = vulnerabilitiesObj.totalResults
    } while (totalResults > resultsPerPage)
    return vulnerabilities
}