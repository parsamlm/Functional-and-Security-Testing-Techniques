import com.google.gson.Gson

fun main() {
    val usageType = askUserForInputType()
    if (usageType == UsageType.MANUAL) {

    } else if (usageType == UsageType.DOCKER) {
        if (isProcessExecutionSuccessful()) {
            if (checkDockerDaemonStatus()) {
                showDockerNetworks()
                val networkName = getUserInput("Enter your desired network name to scan for possible vulnerabilities:")
                if (checkIfDockerNetworkNameIsCorrect(networkName)) {
                    startDockerContainers(networkName)
                    val serviceDetailsList = getServiceDetailsFromNetwork(networkName)
                    if (serviceDetailsList.isEmpty()) {
                        println("There is no service running in the network.")
                        writeToFile(
                            "/Users/parsa/IdeaProjects/Functional-and-Security-Testing-Techniques/Security Part/VulnerabilityScanner/src/main/resources/network_services.json",
                            Gson().toJson(mapOf("message" to "There is no running service in the network."))
                        )
                        return
                    } else {
                        writeToFile(
                            "/Users/parsa/IdeaProjects/Functional-and-Security-Testing-Techniques/Security Part/VulnerabilityScanner/src/main/resources/network_services.json",
                            kotlinObjectToJson(serviceDetailsList)
                        )
                    }
                    serviceDetailsList.forEach { serviceDetails ->
                        val vulnerabilities = fetchAllVulnerabilities(
                            serviceDetails.serviceVendor,
                            serviceDetails.serviceType!!,
                            serviceDetails.serviceVersion
                        )
                        println("${serviceDetails.serviceType} (version: ${serviceDetails.serviceVersion}) vulnerabilities (CVE IDs List):")
                        vulnerabilities.forEach { vulnerability ->
                            println(vulnerability.cve.id)
                        }
                        println("---------------------------------------------------")
                    }
                    stopDockerContainers(networkName)
                } else {
                    println("Network name is incorrect. Rerun the program and enter a valid network name.")
                    return
                }
            }
        } else {
            println("Docker daemon is not running. Please start Docker daemon and try again.")
        }
    } else {
        println("Usage Type is not correct, Try again.")
        return
    }

}

fun askUserForInputType(): UsageType {
    val userInput =
        getUserInput("How do you want to use the script?\n1. Manual\n2. Docker\nEnter the corresponding number:")
    return if (userInput.contentEquals("1")) {
        UsageType.MANUAL
    } else if (userInput.contentEquals("2")) {
        UsageType.DOCKER
    } else {
        UsageType.NONE
    }
}