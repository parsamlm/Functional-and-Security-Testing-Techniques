import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import java.io.File

fun main() {
    if (!checkIfNetworkIsAvailable()) {
        println("This script needs network connection. Please check your network connection and try again.")
        return
    }

    when (askUserForInputType()) {
        UsageType.MANUAL -> handleManualUsageType()
        UsageType.DOCKER -> handleDockerUsageType()
        else -> println("Usage Type is not correct, Try again.")
    }
}

fun handleManualUsageType() {
    val userInputFileAddress =
        getDirectory("resources") + getUserInput("Enter the path of the .json as an input file (e.g., input.json):")
    val file = File(userInputFileAddress)

    if (!file.exists() || !file.isFile) {
        println("The file does not exist or is not a file. Please try again.")
        return
    }

    val inputFile = readFromFile(userInputFileAddress) ?: return
    val services: List<Service> = Gson().fromJson(inputFile, object : TypeToken<List<Service>>() {}.type)
    services.onEach { handleServiceType(it) }
    writeToFile(userInputFileAddress, objectToJson(services))
    createOutput(services = services)
}

fun handleDockerUsageType() {
    val networkServices = getDirectory("resources") + "network_services.json"
    if (!isProcessExecutionSuccessful() || !checkDockerDaemonStatus()) {
        println("Docker daemon is not running. Please start Docker daemon and try again.")
        return
    }

    showDockerNetworks()
    val networkName = getUserInput("Enter your desired network name to scan for possible vulnerabilities:")
    if (!checkIfDockerNetworkNameIsCorrect(networkName)) {
        println("Network name is incorrect. Rerun the program and enter a valid network name.")
        return
    }

    startDockerContainers(networkName)
    val services = getServiceDetailsFromNetwork(networkName)
    services.forEach { service ->
        service.vulnerabilities = fetchAllVulnerabilities(
            findOnlyVulnerable = false,
            vendor = service.vendor!!,
            type = service.type!!,
            version = service.version!!
        )
        writeToFile(networkServices, objectToJson(services))
        createOutput(services = services, dockerNetworkName = networkName)
    }
    stopDockerContainers(networkName)
}

fun handleServiceType(service: Service) {
    when (service.type?.lowercase()) {
        ServiceType.WORDPRESS.toString().lowercase() -> updateService(
            service,
            getWordPressVersion(url = service.url)["version"] ?: "Unknown"
        )

        ServiceType.MYSQL.toString().lowercase() -> updateService(service, getMySQLVersion())
        ServiceType.APACHE.toString().lowercase() -> updateService(service, getApacheVersion())
        else -> println("Service type is not supported. Supported service types are: WORDPRESS, MYSQL, APACHE.")
    }
}

fun updateService(service: Service, version: String) {
    service.version = version
    service.vulnerabilities = fetchAllVulnerabilities(
        vendor = service.type!!,
        type = service.type,
        version = version
    )
}