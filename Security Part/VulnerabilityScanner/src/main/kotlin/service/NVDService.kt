package service

import helper.HttpRequestExecutor
import helper.deserializeJsonToType
import model.Vulnerabilities
import model.Vulnerability

private fun retrieveVulnerabilitiesFromNVD(
    findOnlyVulnerable: Boolean = false,
    vendor: String,
    type: String,
    version: String,
    startIndex: Int = 0
): String {
    val url = "https://services.nvd.nist.gov/rest/json/cves/2.0" +
            "?cpeName=cpe:2.3:a:$type:$type:$version&startIndex=$startIndex${if (findOnlyVulnerable) "&isVulnerable=" else ""}"
    return HttpRequestExecutor().run(url, "3f46456a-4bc3-43f5-8dec-c89c9fd84f65")
}

fun retrieveAllVulnerabilitiesFromNVD(
    findOnlyVulnerable: Boolean = false,
    vendor: String,
    type: String,
    version: String
): Set<Vulnerability> {
    val vulnerabilities = mutableSetOf<Vulnerability>()
    var resultsPerPage = 0
    var totalResults: Int
    do {
        val response = retrieveVulnerabilitiesFromNVD(findOnlyVulnerable, vendor, type, version, resultsPerPage)
        val vulnerabilitiesObj = deserializeJsonToType<Vulnerabilities>(response)
        vulnerabilities.addAll(vulnerabilitiesObj.vulnerabilities)
        resultsPerPage += vulnerabilitiesObj.resultsPerPage
        totalResults = vulnerabilitiesObj.totalResults
    } while (totalResults > resultsPerPage)
    return vulnerabilities
}