package service

import helper.HttpRequestExecutor
import helper.executeBashCommandAndReturnOutput
import org.jsoup.Jsoup
import java.sql.Connection
import java.sql.DriverManager

private fun fetchWebsiteContentAsString(url: String): String =
    runCatching { HttpRequestExecutor().run(url) }.getOrDefault("")

fun fetchWordPressVersionFromMetaTag(url: String?): Map<String, String?> {
    val content = Jsoup.parse(fetchWebsiteContentAsString(url ?: return mapOf("version" to null)))
        .select("meta[name=generator]").first()?.attr("content")
    return mapOf("version" to content?.split(" ")?.get(1))
}

var connection: Connection? = null

/**
 * Establishes a connection to a MySQL database.
 *
 * This function uses the DriverManager class from the java.sql package to establish a connection to a MySQL database.
 * The connection is stored in a global variable named 'connection'.
 * The function takes three parameters: url, username, and password, which default to "jdbc:mysql://localhost:3306/", "root", and "" respectively.
 * The url parameter is the JDBC URL for the MySQL database.
 * The username and password parameters are the credentials for the MySQL database.
 *
 * @param url The JDBC URL for the MySQL database. Defaults to "jdbc:mysql://localhost:3306/".
 * @param username The username for the MySQL database. Defaults to "root".
 * @param password The password for the MySQL database. Defaults to "".
 */
fun establishMySQLConnection(
    url: String = "jdbc:mysql://localhost:3306/",
    username: String = "root",
    password: String = ""
) {
    connection = DriverManager.getConnection(url, username, password)
}

/**
 * Closes the MySQL database connection.
 *
 * This function closes the MySQL database connection that was previously established.
 * The connection is a global variable named 'connection'.
 * If the connection is null, this function does nothing.
 */
fun closeMySQLConnection() = connection?.close()

fun getMySQLVersion(): String {
    establishMySQLConnection()
    val version = connection?.createStatement()?.executeQuery("SELECT VERSION()")?.run {
        next()
        getString(1)
    } ?: ""
    closeMySQLConnection()
    return version.split("-")[0]
}

fun fetchApacheVersionFromBashCommand(): String =
    executeBashCommandAndReturnOutput(arrayOf("httpd", "-v")).split("\n")[0].split(":")[1].split("/")[1].split(" ")[0]

enum class ServiceType {
    WORDPRESS,
    APACHE,
    MYSQL
}