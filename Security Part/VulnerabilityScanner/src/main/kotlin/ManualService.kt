import org.jsoup.Jsoup

fun getInputFileAddressFromUser(): String {
    return getUserInput("Enter file address:")
}

private fun getWebsiteContent(url: String): String {
    var htmlDocument = ""
    try {
        htmlDocument = HttpRequestExecutor().run(
            url = url,
        )
    } catch (exception: Exception) {
        return htmlDocument
    }
    return htmlDocument
}

fun getWordPressVersion(url: String?): Map<String, String?> {
    if (url != null) {
        val htmlDocument = getWebsiteContent(url)
        if (htmlDocument.isNotEmpty()) {
            val doc = Jsoup.parse(htmlDocument)
            val metaTag = doc.select("meta[name=generator]").first()
            if (metaTag != null) {
                val content = metaTag.attr("content")
                if (content.contains("WordPress")) {
                    return mapOf("version" to content.split(" ")[1])
                }
            }
        }
    }
    return mapOf("version" to null)
}

private fun normalizeServiceTypeName(serviceType: String): String {
    return if (serviceType.lowercase() == ServiceType.WORDPRESS.toString().lowercase()) {
        ServiceType.WORDPRESS.toString().lowercase()
    } else if (serviceType.lowercase() == ServiceType.APACHE.toString().lowercase()) {
        ServiceType.APACHE.toString().lowercase()
    } else if (serviceType.lowercase() == ServiceType.MYSQL.toString().lowercase()) {
        ServiceType.MYSQL.toString().lowercase()
    } else {
        ServiceType.NONE.toString().lowercase()
    }
}

fun parseServicesFromJson(jsonString: String): Services {
    return jsonToKotlinObject(jsonString)
}

enum class ServiceType {
    WORDPRESS,
    APACHE,
    MYSQL,
    NONE
}