fun getServiceDetailsFromNetwork(networkName: String): List<ServiceDetails> {
    val serviceDetailsList = mutableListOf<ServiceDetails>()
    val containerNames = findDockerContainersInNetwork(networkName)

    for (containerName in containerNames) {
        if (containerName.isNotEmpty()) {
            val containers = parseContainersFromJson(getContainerDetails(containerName))
            for (container in containers) {
                val (serviceVendor, serviceVersion) = container.config.image.split(":")
                val serviceDetails = ServiceDetails(
                    ipAddress = container.networkSettings.networks[networkName]?.ipAddress ?: "",
                    ports = container.networkSettings.ports.keys,
                    serviceVendor = serviceVendor,
                    serviceType = serviceVendorToServiceType[serviceVendor],
                    serviceVersion = serviceVersion
                )
                serviceDetailsList.add(serviceDetails)
            }
        }
    }

    return serviceDetailsList
}

fun getContainerDetails(containerName: String): String {
    return runBashCommand(arrayOf("/bin/bash", "-c", "docker inspect $containerName"))
}

fun findDockerContainersInNetwork(networkName: String): List<String> {
    return runBashCommand(
        arrayOf(
            "/bin/bash",
            "-c",
            "docker network inspect --format '{{range .Containers}}{{.Name}} {{end}}' $networkName"
        )
    ).split(" ")
}

fun parseContainersFromJson(jsonString: String): Array<Container> {
    return jsonToKotlinObject(jsonString)
}