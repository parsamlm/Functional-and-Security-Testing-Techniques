import java.io.InputStream

fun getServiceDetailsFromNetwork(networkName: String): List<Service> {
    return findDockerContainersInNetwork(networkName)
        .filter { it.isNotEmpty() }
        .flatMap { parseContainersFromJson(getContainerDetails(it)).toList() }
        .map { container ->
            val (serviceVendor, serviceVersion) = container.config.image.split(":")
            Service(
                ipAddress = container.networkSettings.networks[networkName]?.ipAddress ?: "",
                ports = container.networkSettings.ports.keys,
                vendor = serviceVendor,
                type = serviceVendorToServiceType[serviceVendor],
                version = serviceVersion,
                vulnerabilities = null,
                url = null
            )
        }
}

fun getContainerDetails(containerName: String): String =
    runBashCommand(arrayOf("/bin/bash", "-c", "docker inspect $containerName"))

fun findDockerContainersInNetwork(networkName: String): List<String> = runBashCommand(
    arrayOf(
        "/bin/bash",
        "-c",
        "docker network inspect --format '{{range .Containers}}{{.Name}} {{end}}' $networkName"
    )
).split(" ")

fun parseContainersFromJson(jsonString: String): Array<Container> = jsonToObject(jsonString)

val process: Process = Runtime.getRuntime().exec(arrayOf("bash", "-c", "docker ps"))
val errorStream: InputStream = process.errorStream
val outputStream: InputStream = process.inputStream
val exitCode = process.waitFor()
fun isProcessExecutionSuccessful(): Boolean = exitCode == 0

fun checkDockerDaemonStatus(): Boolean = errorStream.read() == -1 && outputStream.read() != -1

fun checkIfDockerNetworkNameIsCorrect(networkName: String): Boolean =
    runBashCommand(arrayOf("/bin/bash", "-c", "docker network ls")).contains(networkName)

fun startDockerContainers(networkName: String) =
    runBashCommand(arrayOf("/bin/bash", "-c", "docker start \$(docker ps -aq --filter network=$networkName)"))

fun stopDockerContainers(networkName: String) =
    runBashCommand(arrayOf("/bin/bash", "-c", "docker stop \$(docker ps -aq --filter network=$networkName)"))

fun showDockerNetworks() =
    println("Docker networks list:\n${runBashCommand(arrayOf("/bin/bash", "-c", "docker network ls"))}")

val serviceVendorToServiceType = mapOf(
    "httpd" to "apache",
    "mysql" to "mysql",
    "wordpress" to "wordpress",
    "zookeeper" to "zookeeper",
    "joomla" to "joomla",
)