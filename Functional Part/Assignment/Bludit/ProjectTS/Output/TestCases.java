package TestCases;

import org.junit.BeforeClass;
// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
import TestCases.PO.*;

public class TestCases {

    @BeforeClass()
    public static void setup() {
        System.setProperty("webdriver.gecko.driver", "InsertGeckoPathHere");
    }

    private WebDriver driver;

    private Map<String, Object> vars;

    private JavascriptExecutor js;

    @Before
    public void setUp() {
        driver = new FirefoxDriver();
        js = (JavascriptExecutor) driver;
        vars = new HashMap<String, Object>();
    }

    @After
    public void tearDown() {
        driver.quit();
    }

    @Test
    public void adoAddContent() {
        driver.get("http://localhost:8080/administrator/");
        driver.manage().window().setSize(new Dimension(1200, 700));
        LoginPO _LoginPO = new LoginPO(driver, js, vars);
        _LoginPO.doLogin("admin", "password");
        HomePO _HomePO = new HomePO(driver, js, vars);
        _HomePO.goToNewContent();
        NewContentPO _NewContentPO = new NewContentPO(driver, js, vars);
        _NewContentPO.createNewContent("Test content");
        ContentPO _ContentPO = new ContentPO(driver, js, vars);
        assert (_ContentPO.getContentTitle().size() > 0);
        _HomePO.logout();
    }

    @Test
    public void bdoChangeUrl() {
        driver.get("http://localhost:8080/administrator/");
        driver.manage().window().setSize(new Dimension(1200, 700));
        LoginPO _LoginPO = new LoginPO(driver, js, vars);
        _LoginPO.doLogin("admin", "password");
        HomePO _HomePO = new HomePO(driver, js, vars);
        _HomePO.goToContent();
        ContentPO _ContentPO = new ContentPO(driver, js, vars);
        _ContentPO.changeUrl("new-post-url");
        _HomePO.goToContent();
        assert (_ContentPO.getContentUrl().size() > 0);
        _HomePO.logout();
    }

    @Test
    public void cdoChangePosition() {
        driver.get("http://localhost:8080/administrator/");
        driver.manage().window().setSize(new Dimension(1200, 700));
        LoginPO _LoginPO = new LoginPO(driver, js, vars);
        _LoginPO.doLogin("admin", "password");
        HomePO _HomePO = new HomePO(driver, js, vars);
        _HomePO.goToContent();
        ContentPO _ContentPO = new ContentPO(driver, js, vars);
        _ContentPO.changeContentPosition("30");
        _HomePO.goToContent();
        _ContentPO.getContentPosition();
        assertThat(_ContentPO.set_ID_jsposition_1(), is("30"));
        _HomePO.logout();
    }

    @Test
    public void ddoChangeParent() {
        driver.get("http://localhost:8080/administrator/");
        driver.manage().window().setSize(new Dimension(1200, 700));
        LoginPO _LoginPO = new LoginPO(driver, js, vars);
        _LoginPO.doLogin("admin", "password");
        HomePO _HomePO = new HomePO(driver, js, vars);
        _HomePO.goToContent();
        ContentPO _ContentPO = new ContentPO(driver, js, vars);
        _ContentPO.changeContentParent("Create your own content");
        _HomePO.goToContent();
        _ContentPO.getContentPosition();
        assertThat(_ContentPO.set_ID_jsparent(), is("create-your-own-content"));
        _HomePO.logout_1();
    }

    @Test
    public void edoAddContentAsDraft() {
        driver.get("http://localhost:8080/administrator/");
        driver.manage().window().setSize(new Dimension(1200, 700));
        LoginPO _LoginPO = new LoginPO(driver, js, vars);
        _LoginPO.doLogin("admin", "password");
        HomePO _HomePO = new HomePO(driver, js, vars);
        _HomePO.goToNewContent();
        NewContentPO _NewContentPO = new NewContentPO(driver, js, vars);
        _NewContentPO.createContentAsDraft("Draft Content");
        ContentPO _ContentPO = new ContentPO(driver, js, vars);
        assert (_ContentPO.getDraftContentTitle().size() > 0);
        _HomePO.logout();
    }

    @Test
    public void fdoSetContentAsSticky() {
        driver.get("http://localhost:8080/administrator/");
        driver.manage().window().setSize(new Dimension(1200, 700));
        LoginPO _LoginPO = new LoginPO(driver, js, vars);
        _LoginPO.doLogin("admin", "password");
        HomePO _HomePO = new HomePO(driver, js, vars);
        _HomePO.goToContent();
        ContentPO _ContentPO = new ContentPO(driver, js, vars);
        _ContentPO.setContentAsStickyPost("Sticky");
        _HomePO.goToContent();
        assert (_ContentPO.getStickyContentTitle().size() > 0);
        _HomePO.logout();
    }

    @Test
    public void gdoDeleteContent() {
        driver.get("http://localhost:8080/administrator/");
        driver.manage().window().setSize(new Dimension(1200, 700));
        LoginPO _LoginPO = new LoginPO(driver, js, vars);
        _LoginPO.doLogin("admin", "password");
        HomePO _HomePO = new HomePO(driver, js, vars);
        _HomePO.goToContent();
        ContentPO _ContentPO = new ContentPO(driver, js, vars);
        _ContentPO.deleteContent();
        assert (_ContentPO.set_LINKTEXT_FollowBludit().size() == 0);
        _HomePO.logout();
    }

    @Test
    public void hdoAddUser() {
        driver.get("http://localhost:8080/administrator/");
        driver.manage().window().setSize(new Dimension(1200, 700));
        LoginPO _LoginPO = new LoginPO(driver, js, vars);
        _LoginPO.doLogin("admin", "password");
        HomePO _HomePO = new HomePO(driver, js, vars);
        _HomePO.goToUsers();
        UsersPO _UsersPO = new UsersPO(driver, js, vars);
        _UsersPO.createNewUser("usertest", "usertest123", "usertest123", "Administrator");
        assert (_UsersPO.set_LINKTEXT_usertest().size() > 0);
        _HomePO.logout();
    }

    @Test
    public void idoChangePassword() {
        driver.get("http://localhost:8080/administrator/");
        driver.manage().window().setSize(new Dimension(1200, 700));
        LoginPO _LoginPO = new LoginPO(driver, js, vars);
        _LoginPO.doLogin("admin", "password");
        HomePO _HomePO = new HomePO(driver, js, vars);
        _HomePO.goToUsers();
        UsersPO _UsersPO = new UsersPO(driver, js, vars);
        _UsersPO.changeUserPassword("newpassword", "newpassword");
        assert (_HomePO.getAlert().size() > 0);
        _HomePO.logout();
    }

    @Test
    public void jdoAddSocials() {
        driver.get("http://localhost:8080/administrator/");
        driver.manage().window().setSize(new Dimension(1200, 700));
        LoginPO _LoginPO = new LoginPO(driver, js, vars);
        _LoginPO.doLogin("admin", "password");
        HomePO _HomePO = new HomePO(driver, js, vars);
        _HomePO.goToUsers();
        UsersPO _UsersPO = new UsersPO(driver, js, vars);
        _UsersPO.addSocialMediaToUser("https://www.facebook.com/some_fake_user_name_52432562135863", "https://instagram.com/some_fake_user_name_52432562135863");
        _HomePO.goToUsers();
        _UsersPO.getUserSocialMedia();
        assertThat(_UsersPO.set_ID_jsfacebook_1(), is("https://www.facebook.com/some_fake_user_name_52432562135863"));
        {
            String value = driver.findElement(By.id("jsinstagram")).getAttribute("value");
            assertThat(value, is("https://instagram.com/some_fake_user_name_52432562135863"));
        }
        _HomePO.logout();
    }
}
